continue
expect(assigns(:result_message)).to eq("it's even")
continue
expect(assigns(:result_message)).to eq("it's even")
continue
expect(assigns(:result_message)).to eq("it's even")
result_message
response
response.output
poker_face.num
poker_face.reload
response
poker_face
poker
continue
next
num
continue
params[:pocker_face][:num].to_i
params[:pocker_face][:num]
params[:pocker_face]
params[:poker_face]
params
poker_face
@poker_faces
params
continue
pocker_face
continue
pocker_face
continue
num
continue
params
continue
num
continue
next
num
next
continue
@poker_faces.last.present? ? @poker_faces.last.batch_id : 10
@poker_faces.last.present?
@poker_faces.last.batch_id.present?
@poker_faces.last.batch_id.present? ? @poker_faces.last.batch_id : 10
continue
next
continue
PokerFace.
PokerFace.all
@poker_faces
@poker_faces.last.batch_id
continue
@poker_faces = PokerFace.all
continue
next
continue
next
nextg
continue
next
continue
 get :index
continue
expect(poker_face.errors.full_messages).to eq("Batch can't be blank")
poker_face.errors.full_messages
poker_face.errors
poker_face
continue
expect(poker_face.batch_id).to eq(987_654)
expect(PokerFace.count).to eq(1)
expect(poker_face).to be_valid
poker_face
continue
next
poker_face
PokerFace.count
PokerFace
continue
link_to "Show this poker face", poker_face
render poker_face
poker_face
continue
@poker_face
params
continue
PokerFace.all
params
